import {
  type AccessTokenPayload,
  accessTokenConfig,
  type RefreshTokenPayload,
  refreshTokenConfig,
  signToken,
  verifyToken,
} from './jwt';

vi.mock('@/config/env', () => ({
  env: {
    JWT_ACCESS_PRIVATE_KEY:
      'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzRsVEhRbEJwb0JHSUYKRlN1NWg2a1R5UWxXMmlLVVlHbDVWaTAya09qNTBxZkQwQ3gwcjFQbWc3ZVdyaTAxUnV3MlViTW15Vk1sREpYTgp6Zjh1aUtWSU5pblQyMnpDZW11RllRMGxqcTd4dmdpQmFoQ00yZGN6OWdtUVl5MHR1UDVJek9iYnlCQTVxZXJBCkJVeTRMc01uVmZlNGIrYTc2TlVSUlUyZ21MTTRRaHQwMXZSUVZlb0hEZU80RlRhNGkxbFBVcHlCU2t0bk1kNDQKRGdDNFlyZTRpV3dLR1RGajBSOS9TZ2E1WWsvNHdGMXRibXZJTWRpNWJVVG1OU1doWEc1Yld2RXduT1RvV25hQgpkOW5wUjh3MWNYanRMRmtyV2ltUmtzVUIrbmxUSU9zaTQxNkZMaDdhTHJ1aHJkN2lQbDZZS2ZsY21TZDVqRlBsCkUwZDhFb25OQWdNQkFBRUNnZ0VBR3dLSjlaR1dnNTRRa2RuVk9pTGwxT1ZZSG9OeEIvRkx2ZHVrWmhXeVljdzMKakduTDk0OG9ZZFRvYW40MlUxTjdnVDlYVGRlcitRSHNjZDh3OWlnOHQySmxvSUM5VzMvNmQ5d0p4bk1vbW10SwpaMVdUOG1oMkd6NW5pOTlYWHhkdzdrbzloZSt5b0IyREluSWtGZGVSNnhHalhEUFR1YStLYmlxTC8zSVkxNlJsCktkeUwydFhTQkdRS05RTkd0MkwyYTQxYzVjc3psUTFXdk1BaUxXNE4xT0tzL0prT0JqWjk2MG55LytGcnlQdVAKa2w4bU01YmlxcmJuNFFFY2thMmViNjZseG1sblZlQk1KYkRQV3F1WkpuUTJPeDVBdnRlaDE1djdHcUFpdTJ1NwpWODhJYjhGNFZ4dlRBbDlYNVF6eXg3Tk1rTTg4di93RnAwVEFjclNYUVFLQmdRRGVNdjBBSjg0Qzg3T3VFVHRKCllYM2NvOENQbURVNXNlNzRpZ0c2dU51cEUrSS9hNVo5dW5kTEp3NzE1YlZKcElvNDNiVk5kYmtmdVlvTDBjMFAKVUtTa2NVRFdQeWhzRDJVbUFvNUhCdGxidWwzV05QVks4YXZBMno5R1BsS2NtV0luY0oyclZyZzRPcktxbFRSMQppWXJNODBLQ0JvQ3QzN3B0RTVYcmozQTZGUUtCZ1FEVXFWT3dLRVhJekdXZWJSa2xtQ1J6QytQVWplUXVlbGxGCjFMdFBucXlBcUNuRVhyV3I4STdYVnh6eVdLZ1JoNlI3by8zZVBGYnJyU1ZvejlRb1pLQ0NFbFFMOTB2WmpkbU4KTXdWcU4wdGVIUk5uWG5TUU1yc0xQNWdIRE5HaEo4UjA2QlFLcWpmM2xkRWNycWtVcVQ0cjBHbit1ay9aNGNTQwp1NlNOMjRXVzJRS0JnUUNMaDdVOEhjTE9NNzdITmVibTQ2T25vK1ROeHlUVlFCanlWYWRVVzdVRWJZb0xqVUlKClhjaC9sdDFjS0kwNDIydzQzWEIyWGRDTVRYU1VpNENiZDJhTUpObzBMNkR3aXBKWDFnOEdKeFRpOXhycDRvT08KTmtoR2FPZEk4dVhwbEtBQWFFVjZUSkNPTHIzM1JJNldxSEpTMVFjVW80UzJxdUZra1lINVZDK0RLUUtCZ0JYNApwSmZYb1ZZY29BY2RPSExrNUNjcXZGQXlsTGVrbG1LYmx2cWo1eWludHlEOXRBRmVxak5mWWJNOEs2a2IvWWQwCnF2N3g5djBFZDQvN29PekhjTG5ma09Wbm1HT1N2ejVTWGlYYUxxUTdsc3lnT3FUSFNRSGhnU0NCVjRzeDQ1ODgKZHcyZkJvZEM2RWJ4V0xDMHg2S1pOc3BGajRod1JmQkgyTGw3UzdNSkFvR0Fid2ZmbVNMZnB0cmZjQlN1VVR2VwptZnBXNFhwR1p0eTRLbEZ0clRvMkUwM1BlQk9DdUxiZ0RjLzRvTWhPSW5tTW5OZ1lNMEpKUExKL0lIR01xZ1dOCnlHL2RMNXg2WktwV3N4WnRJeU5objczQ296SjA5K092WmpabHdOZGE1eVlRdEJ3YjZPNlhHWk5tczFNWmxZbFcKYWlTT0JrSWNRNmJDV1JYUEhDRUhMRTg9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K¶',
    JWT_ACCESS_PUBLIC_KEY:
      'LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1SlV4MEpRYWFBUmlCUlVydVllcApFOGtKVnRvaWxHQnBlVll0TnBEbytkS253OUFzZEs5VDVvTzNscTR0TlVic05sR3pKc2xUSlF5VnpjMy9Mb2lsClNEWXAwOXRzd25wcmhXRU5KWTZ1OGI0SWdXb1FqTm5YTS9ZSmtHTXRMYmorU016bTI4Z1FPYW5xd0FWTXVDN0QKSjFYM3VHL211K2pWRVVWTm9KaXpPRUliZE5iMFVGWHFCdzNqdUJVMnVJdFpUMUtjZ1VwTFp6SGVPQTRBdUdLMwp1SWxzQ2hreFk5RWZmMG9HdVdKUCtNQmRiVzVyeURIWXVXMUU1alVsb1Z4dVcxcnhNSnprNkZwMmdYZlo2VWZNCk5YRjQ3U3haSzFvcGtaTEZBZnA1VXlEckl1TmVoUzRlMmk2N29hM2U0ajVlbUNuNVhKa25lWXhUNVJOSGZCS0oKelFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==¶',
    JWT_REFRESH_PRIVATE_KEY:
      'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRE94RHFiSWI3ZDM2WTEKeEhxNCt3M1MvWFBZSk4wY1JRODFpRjFpamd6eDFuOFNYdXlqWFBOK3UybW5ZYUVqK2U1Z01MbmFhZzFLWEF0WQppNnhheG9reEM2Z1YyR2h6RXFwcXlaMjJDdUFldTJwKytmWTY4MEVoVm1xc1ZYbnV4MWFibmVXVkJ4WFVZckk1Cjl5VXhOQVlZUWMyazNXZ1RKb3krYXVacUVFSDV2UFhiUE5uc0RJMnJrejFqRDYzVDV6UEk3OWFXQWpaNVdkU0gKYnoxYVhXWHBkTi93aFk2TEJoZnhDM0wwK2xhSWlQWHVEU0hpd0tuQVRtYkFseTJOV2FlOVQ1Z2h6c1pmQlVmQQp1bTdmWTU5WitMa3lHd0tjOHRJSXdqSzBKZG5TMlV4RHRNclNzbzRBNTNoMmZCNlZuMXhJSTJWdzBKUE5jSnVtCmpPdlFqUFhCQWdNQkFBRUNnZ0VBRC8ySnBzRUNXTTJ1QzA4ZTlUcW4yVjhKTVhobHNvVCtFSFFlVWhFNFJtVUIKNk1naDRZbStaRmtCYW1vWXpkdkxVcHhuYUh2TDBWU3krcGhsV09rdEVrend6OWV2cERsQ1VyQ0s4Tm1BZHYvNQpmc2tTcTRFYWZWc3pOQkZjTlFUWGhDdHBrT1UrWVViTXVtemhtY296TDh4a1Vmd0pkaDhFd3NrbytVbzVQL2lqCkpSZlozTjIzUTkyS3lEeE45dXVwWFR1VjNnT29mdW5maVdhN0pqR1RQNEpBeWlJcGRkQlY1UUNSS2xEMW9DU3MKU3V5ajFPc0FOMytUU2o2L2U3azRSN1lRUWlZS1RkVTg3SkY3dmpTM1djK09FL1dudWJLNGVHOUZZSzkzNnhSZApiK1RqWlM5aWQ2YkJJdkQyUUxKK0tFd0xuMmwwQXJjdjdLNXdRY0hHWFFLQmdRRHdvWGZlSStmSDM2OEswcXNvCmRIZkJXamFvWEJuRVNHY3V4YnczRnkwaDJ5ek5CVlY5Mit2c01yTUxraXp6bi9NaVBBRlFUUy9mdVZwMEZtWm0KaW96ZG1wUXNNL091dStYYTR1MWRhT0pNUkxQdVZMb1NmbGNNL1VHVGRpVUYxdExKRGJodktSUGVVQjIxWG54eAp5d2xESmNqcjU1VmFCdXROQTBZMDNjVTdYd0tCZ1FEYitRekc0UGNXb2hSQUFzYWlaNDE0RS81ZnNnYjJPblZ0CmszUGNDa2NzeUkyR3lRZGY5L2JoRzFnVFU2MC9rRHFNL0VQaFE3dEMwamJtbWlCa2JRVWY0MFpLaUJCT2c1UEwKaUFnbUduaGJNRU15MXBjVlhHMDVsRzR5Q3R5TVpzRkZkVVpiWTdWdTV0S0N6MjJib3FFUTdiWko0ZDgrTmppcgpJTEM0aFdpQzN3S0JnQWw3NDdTT3A3ajUrUFV0UG0rMnYyMlFkNjBGREVMdk01bmxVemk4b2h1K2ZyS0o3a2VxCm5rN041TDZsQVQ2TTVGRktHaWNuRTZiMnNEajVGUW9mbGRPNkh2THJEVVNxeFRGdVZqcWpRcUFNNlNhUWtsRGUKUitJTUxVUjVtSlgxVkpOMkJmbmpuWlBhaG9FNmV4OGxDSFZzRE5JM2EyeUQ3MHcydjlLZmx3RnpBb0dBRjJKdgplRWo4RzN6WmVFQ1RTenFFOEluM2xjYkFOTGJjT3V6YytUeGllcUZMWWxQR28rNGhZYWJkZ3hoM0ozVzJzN3d4Cm55WHJKMXhmbDc0MHlWaEpuaTAwRU1KTU1YeU5YcXEwYXhDUFVPcGRpbThEbXJLN3JjNVl0SnN3L1FBRGRkWFUKeCt4ZW9rNkpmSHgrbzNmemRYQS8yN1RXWGErMzhJRkdLQ2VPaDdNQ2dZRUF0c2ViVDFnREpTSmlxc2NQZkpWYgpOYWZkYkcrYks5Zlg0QklNY0wvL25IaG9DekxDVUEyWGs1d21JaFl1YmRmeldEejcyQVFtOE1vRGo5VkYvUUlhClZ6RU9CZDlidmU5c3crMkF5QmprNFhYSzRYdWR6MXVzVlJqZFNoNFREaytYeWVFQWhHakp4Q05ZU0FkSnl0amkKRDN5Z0ZTZ0haQ25lWHdhNzFjNTJLdWc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K¶',
    JWT_REFRESH_PUBLIC_KEY:
      'LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6c1E2bXlHKzNkK21OY1I2dVBzTgowdjF6MkNUZEhFVVBOWWhkWW80TThkWi9FbDdzbzF6emZydHBwMkdoSS9udVlEQzUybW9OU2x3TFdJdXNXc2FKCk1RdW9GZGhvY3hLcWFzbWR0Z3JnSHJ0cWZ2bjJPdk5CSVZacXJGVjU3c2RXbTUzbGxRY1YxR0t5T2ZjbE1UUUcKR0VITnBOMW9FeWFNdm1ybWFoQkIrYnoxMnp6WjdBeU5xNU05WXcrdDArY3p5Ty9XbGdJMmVWblVoMjg5V2wxbAo2WFRmOElXT2l3WVg4UXR5OVBwV2lJajE3ZzBoNHNDcHdFNW13SmN0alZtbnZVK1lJYzdHWHdWSHdMcHUzMk9mCldmaTVNaHNDblBMU0NNSXl0Q1haMHRsTVE3VEswcktPQU9kNGRud2VsWjljU0NObGNOQ1R6WENicG96cjBJejEKd1FJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==¶',
    JWT_ACCESS_EXPIRES_IN: '30m',
    JWT_REFRESH_EXPIRES_IN: '7d',
  },
}));

describe('JWT Functions', () => {
  const accessPayload = {
    id: 'user-123',
  };

  const refresPayload = {
    id: 'user-123',
    fingerprint: '127.0.0.1-ua',
  };

  it('should sign a access token and return a JWT string', () => {
    const token = signToken<AccessTokenPayload>(
      accessPayload,
      accessTokenConfig.sign
    );
    expect(typeof token).toBe('string');
    expect(token.split('.')).toHaveLength(3);
  });
  it('should sign a refresh token and return a JWT string', () => {
    const token = signToken<RefreshTokenPayload>(
      refresPayload,
      refreshTokenConfig.sign
    );
    expect(typeof token).toBe('string');
    expect(token.split('.')).toHaveLength(3);
  });
  it('should verify a valid access token and return the correct payload', () => {
    const token = signToken<AccessTokenPayload>(
      accessPayload,
      accessTokenConfig.sign
    );
    const verified = verifyToken<AccessTokenPayload>(
      token,
      accessTokenConfig.verify
    );

    expect(verified).not.toBeNull();
    expect(verified?.id).toBe(accessPayload.id);
  });
  it('should verify a valid refresh token and return the correct payload', () => {
    const token = signToken<RefreshTokenPayload>(
      refresPayload,
      refreshTokenConfig.sign
    );
    const verified = verifyToken<RefreshTokenPayload>(
      token,
      refreshTokenConfig.verify
    );

    expect(verified).not.toBeNull();
    expect(verified?.id).toBe(accessPayload.id);
  });

  it('should return null for an invalid token', () => {
    const invalidToken = 'invalid.token.value';
    const result = verifyToken(invalidToken, accessTokenConfig.verify);

    expect(result).toBeNull();
  });
});
